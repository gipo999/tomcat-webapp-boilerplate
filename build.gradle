plugins {
	id 'java'
	id 'war'

	id 'eclipse'
	id 'idea'

	id 'jacoco'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'checkstyle'
	id 'org.openrewrite.rewrite' version '6.15.1'
	id "com.github.spotbugs" version "6.0.15"

	id "name.remal.sonarlint" version "4.2.3"

	id 'info.solidsoft.pitest' version '1.15.0'

	id 'groovy'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

// mainClassName = "com.smi.xxx.rest.base.App"

sourceCompatibility = 21
targetCompatibility = 21
project.webAppDirName = 'src/main/webapp'

// IMP: compatibliity with tomcat 9?
// jersey 2+ works only with tomcat 9+
// jersey 3+ works only with tomcat 10+
// check docker compose file
// https://stackoverflow.com/questions/62595510/severe-servlet-jersey-web-application-in-web-application-restapp-threw-loa
def JERSEY_VERSION = "2+"
def TOMCAT_VERSION = "9+"

dependencies {
	// tools
	rewrite("org.openrewrite.recipe:rewrite-static-analysis:1.9.0")

	rewrite("org.openrewrite.recipe:rewrite-java-security:2.9.0")

	implementation(group: 'org.slf4j', name: 'slf4j-api', version: '2+')

	compileOnly(group: 'org.apache.tomcat', name: 'tomcat-catalina', version: "${TOMCAT_VERSION}")

	implementation('javax.xml.bind:jaxb-api:2.3.1')

	implementation(group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: "2+")

	implementation(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${JERSEY_VERSION}")

	implementation(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: "${JERSEY_VERSION}")

	implementation(group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: "${JERSEY_VERSION}")

	implementation(group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: "${JERSEY_VERSION}")

	implementation(group: 'org.slf4j', name: 'slf4j-simple', version: '2+')

	implementation(group: 'com.google.code.gson', name: 'gson', version: "2+")

	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.2")

	testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.2")

	testImplementation(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${JERSEY_VERSION}")


	//    implementation group: 'com.smi', name: 'smi-commons-gson', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-jersey', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-yaml', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-lang', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-singleton', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-pool', version: "${SMI_COMMONS}"
}


// no main method
// https://stackoverflow.com/questions/8630496/main-class-of-a-tomcat-web-application
// https://gist.github.com/Antowka/b99b6259376a7eb44c22

repositories {
	mavenCentral()
}

// eclipse.project {
//     natures "org.eclipse.buildship.core.gradleprojectnature"
// }

// def _groupID = 'io.github.gipo999'
// def _artifactID = 'rest.base'
// def _mainClass = 'App'

// ### CHECKSTYLE
checkstyle {
	toolVersion '10.17.0'

	ignoreFailures = false

	maxWarnings = 0
}

// ### REWRITE
rewrite {
	activeRecipe("org.openrewrite.staticanalysis.CodeCleanup")

	activeRecipe("org.openrewrite.java.security.PartialPathTraversalVulnerability")

	activeRecipe("org.openrewrite.java.security.JavaSecurityBestPractices")

	activeRecipe("org.openrewrite.java.security.RegularExpressionDenialOfService")
}


// TODO: make sure we are not checking and formatting useless files

// ### SPOTLESS
spotless {
	format 'misc', {
		target '*.gradle', '.gitattributes', '.gitignore'

		targetExclude 'build/**/*', 'node_modules/**/*', 'target/**/*', 'out/**/*', 'dist/**/*', 'bin/**/*'

		trimTrailingWhitespace()

		indentWithTabs()

		endWithNewline()
	}

	format 'xml', {
		target '**/*.xml'

		targetExclude 'build/**/*', 'node_modules/**/*', 'target/**/*', 'out/**/*', 'dist/**/*', 'bin/**/*', 'tomcat/**/*'

		eclipseWtp('xml')
	}

	format 'styling', {
		targetExclude 'build/**/*', 'node_modules/**/*', 'target/**/*', 'out/**/*', 'dist/**/*', 'bin/**/*'

		target  '**/*.json', '**/*.yaml', '**/*.toml', '**/*.js', '**/*.cjs', '**/*.mjs'

		prettier(['prettier-plugin-toml': '2.0.1']).config(['plugins': ['prettier-plugin-toml']])
	}

	groovy {
		importOrder()

		removeSemicolons()

		greclipse()

		// Add a license header to all files
		// licenseHeader('/* (C) $YEAR */') // or licenseHeaderFile
	}

	groovyGradle {
		targetExclude 'build/**', 'node_modules/**', 'target/**', 'out/**', 'dist/**', 'bin/**'

		target '*.gradle'

		greclipse()
	}

	java {
		importOrder()

		removeUnusedImports()

		cleanthat()

		trimTrailingWhitespace()

		endWithNewline()

		googleJavaFormat()

		formatAnnotations()

		// licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
	}
}


// ### PIT
pitest {
	junit5PluginVersion = '1.2.1'

	pitestVersion = '1.15.2'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}


test {
	// dependsOn 'check'

	finalizedBy jacocoTestReport

	useJUnitPlatform {
		exclude("**/integration/**")
	}

	testLogging {
		events "passed", "skipped", "failed"
	}
}

// ## JACOCO report for test coverage and codecov

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true // required for codecov
	}
}

// we provide another command as we need to run war in CI without running the tests
// check requires nodejs
// war {
// 	dependsOn 'check'
// 	dependsOn 'test'
// }

tasks.register("buildWar") {
	dependsOn "check"
	dependsOn "test"
	dependsOn "war"
}

task cleanEclipse(type: Delete, overwrite: true) {
	delete '.project'

	delete '.classpath'

	delete '.settings'

	delete "bin"
}

// TODO: make war start the test command, test start the check command

tasks.register('integrationTest', Test) {
	group = 'verification'

	useJUnitPlatform {
		include("**/integration/**")
	}

	testLogging {
		events "passed", "skipped", "failed"
	}
}
