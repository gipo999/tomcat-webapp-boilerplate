# NOTE: this is a composite action
# it could be a public action if moved to an individual public repo
# it could be a private action for internal use like this one
name: Attack container CI
# those inputs are passed to every individual action
inputs:
  docker_tag:
    description: "docker tag to attack"
    required: true
  snyk_token:
    description: snyk token
    requried: true
  pat:
    description: "personal access token for zap"
    required: true
  github_token:
    description: "github token"
    required: true
  run_wapiti:
    description: "run wapiti"
    required: false
    default: false
  run_zap:
    description: "run zap"
    required: false
    default: false
  run_nmap:
    description: "run nmap"
    required: false
    default: false
  run_snyk:
    description: "run snyk"
    required: false
    default: false
outputs:
  wapiti:
    description: "wapiti output if run"
    value: ${{ steps.wapiti.outputs.wapiti }}
  zap:
    description: "zap output if run"
    value: ${{ steps.zap.outputs.zap }}
  nmap:
    description: "nmap output if run"
    value: ${{ steps.nmap.outputs.nmap }}
  snyk:
    description: "snyk output if run"
    value: ${{ steps.snyk.outputs.snyk }}
runs:
  using: composite
  steps:
    #
    # Wapiti
    # emits .wapiti/generated_report/report.html
    # for now, base default scan, can be improved alot: https://github.com/wapiti-scanner/wapiti/blob/master/doc/wapiti.ronn
    - name: Wapiti Scan
      if: ${{ inputs.run_wapiti == 'true' }}
      # I cloned their repo and created the docker image, pushing it to my registry
      # Then i created a githbu action with nodejs to run the docker image since we need --network=host
      uses: gipo355/vuln-docker-scanners-wapiti-action@6147b708e264ce95171ba8c246f0d84a7e6d718a # v1.0.3
      with:
        target: "http://localhost:8080/tomcat-webapp-boilerplate/app"
        github_token: ${{ inputs.github_token }}
    - name: Set output if wapiti has run
      id: wapiti
      if: ${{ inputs.run_wapiti == 'true' }}
      shell: bash
      run: echo "wapiti=true" >> $GITHUB_OUTPUT
    # ZAP
    #
    # can be improved with rules file and cmd_options
    # TODO: must check how to add addons and extensions, possibly using a custom docker image
    #
    # there is an addon to generate a sarif report https://www.zaproxy.org/docs/desktop/addons/report-generation/report-sarif-json/
    #
    # ZAP emits json or creates an issue only using theses cmds
    # /usrreport_json.json report_md.md report_html.html
    # /usr/bin/chmod a+w report_json.json report_md.md report_html.html
    # could do post-processing: create custom action to convert zap json to sarif or use zap sarif addon
    # check trivy, snyk actions for reference on parsing
    - name: ZAP Scan
      if: ${{ inputs.run_zap == 'true' }}
      uses: zaproxy/action-full-scan@d2a07475d467566c9a3e3c700f31f47724aa1060 # v0.10.0
      with:
        # pat for creating issues
        token: ${{ inputs.pat }}
        # docker name only if not pulling from registry
        # docker_name: ${{ env.TEST_TAG }}
        target: "http://localhost:8080/tomcat-webapp-boilerplate/app"
        # rules_file_name: ".zap/rules.tsv"
        cmd_options: "-aj"
    # NOTE: test loading artifact
    - name: Upload Artifact
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
      with:
        name: zap-report
        path: ./report_json.json
        overwrite: true
    # NOTE: test generating summary
    - name: Adding markdown
      shell: bash
      run: echo '### Done zap' >> $GITHUB_STEP_SUMMARY
    - name: Set output if zap has run
      if: ${{ inputs.run_zap == 'true'}}
      shell: bash
      id: zap
      run: echo "zap=true" >> $GITHUB_OUTPUT
    #
    # run custom container with nmap
    # NOTE: can't use docker action with scanners
    # docker actions don't pass the --network=host  flag
    # must create node action to run docker container
    # check zap action for reference
    # https://github.com/zaproxy/action-full-scan
    #
    # NOTE: nmap deactivated for now as it possibly exposes github vulns
    #
    - name: Nmap Scan
      if: ${{ inputs.run_nmap == 'true' }}
      uses: gipo355/vuln-docker-scanners-nmap-action@debeebb1184d79dd8e7f1148aebe58a8b2f86efe # v1.1.4
      with:
        github_token: ${{ inputs.github_token }}
        target: "localhost"
        vulner: true
        vulscan: true
        port: "8080"
        flags: "-sV"
        generate_reports: true
    - name: Set output if nmap has run
      if: ${{ inputs.run_nmap == 'true' }}
      id: nmap
      shell: bash
      run: echo "nmap=true" >> $GITHUB_OUTPUT
    #
    # SNYK
    - name: Set up Snyk CLI to check for security issues
      if: ${{ inputs.run_snyk == 'true' }}
      uses: snyk/actions/setup@6312a53377a551c0258438bf25fb8f378afbc977
    - name: Set output if snyk has run
      if: ${{ inputs.run_snyk == 'true' }}
      id: snyk
      shell: bash
      run: echo "snyk=true" >> $GITHUB_OUTPUT
    - name: login to snyk
      if: ${{ inputs.run_snyk == 'true' }}
      shell: bash
      run: snyk auth ${{ inputs.snyk_token }}
    # SNYK CONTAINER
    # Snyk can be used to break the build when it detects vulnerabilities.
    # In this case we want to upload the issues to GitHub Code Scanning
    # BUG: sarif output doesn't work, github code scanning can't process it, nulls in the output
    # TODO: post-processing the snyk report to remove nulls using a custom action
    #
    # Error: Code Scanning could not process the submitted SARIF file:
    # could not convert rules: invalid security severity value, is not a number: null
    # ConfigurationError: Code Scanning could not process the submitted SARIF file:
    # could not convert rules: invalid security severity value, is not a number: null
    #     at run (/home/runner/work/_actions/github/codeql-action/f079b8493333aace61c81488f8bd40919487bd9f/lib/upload-sarif-action.js:70:15)
    #     at async runWrapper (/home/runner/work/_actions/github/codeql-action/f079b8493333aace61c81488f8bd40919487bd9f/lib/upload-sarif-action.js:84:9)
    #
    - name: run snyk container
      if: ${{ inputs.run_snyk == 'true' }}
      shell: bash
      run: snyk container test ${{ inputs.docker_tag }} --file=Dockerfile --sarif > snyk-container.sarif || true
      #
      # UPLOADS TO GITHUB CODE SCANNING
      # Will be done when sarifs are fixed
      # - name: Upload snyk container result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@f079b8493333aace61c81488f8bd40919487bd9f # v3
      #   with:
      #     sarif_file: snyk-container.sarif # :FIXME: <-- this is broken, post-process
      # - name: Upload vulner report to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@f079b8493333aace61c81488f8bd40919487bd9f # v3
      #   with:
      #     sarif_file: nmap-reports/vulner/vulner-report.sarif
#
# TODO: add load test with wrk, and other scanners?
#
# NOTE: must decide where and how to scan. PR, release, schedule, push, etc
# should it block the build or PR? this is quite hard to do since it's an async process and decisions must be human made
#
# NOTE: where to put outputs? GH pages, github code scanning, PR comments, issues, external applicaton etc
